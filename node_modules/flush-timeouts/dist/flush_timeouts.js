(function() {
  var areCallbacksIdentical, currentFlushedTimeout, removeTimeout, root, scheduledTimeouts, timeoutWouldResultInRecursion;
  scheduledTimeouts = [];
  currentFlushedTimeout = null;
  root = null;
  if (typeof process !== 'undefined') {
    root = global;
  } else {
    root = window;
  }
  root.originalSetTimeout = root.setTimeout;
  root.setTimeout = function(callback, delay) {
    var timeoutId;
    timeoutId = root.originalSetTimeout(function() {
      removeTimeout(timeoutId);
      return callback();
    }, delay);
    scheduledTimeouts.push({
      timeoutId: timeoutId,
      callback: callback,
      parent: currentFlushedTimeout
    });
    return timeoutId;
  };
  root.flushTimeouts = function(allowedCallStackSize) {
    if (allowedCallStackSize == null) {
      allowedCallStackSize = root.flushTimeouts.allowedCallStackSize;
    }
    if (scheduledTimeouts.length === 0) {
      throw new Error('flushTimeouts: No timeouts scheduled which could be flushed.');
    }
    while ((currentFlushedTimeout = scheduledTimeouts.shift())) {
      clearTimeout(currentFlushedTimeout.timeoutId);
      if (!timeoutWouldResultInRecursion(currentFlushedTimeout, allowedCallStackSize)) {
        currentFlushedTimeout.callback();
      }
    }
    return currentFlushedTimeout = null;
  };
  root.flushTimeouts.allowedCallStackSize = 10;
  removeTimeout = function(timeoutId) {
    return scheduledTimeouts = scheduledTimeouts.filter(function(timeout) {
      return timeout.timeoutId !== timeoutId;
    });
  };
  timeoutWouldResultInRecursion = function(timeoutToCheck, allowedCallStackSize) {
    var identicalCallbacks, parentCallbacks, timeout;
    parentCallbacks = [];
    timeout = timeoutToCheck;
    while ((timeout = timeout.parent)) {
      parentCallbacks.push(timeout.callback);
    }
    identicalCallbacks = parentCallbacks.filter(function(parentCallback) {
      return areCallbacksIdentical(timeoutToCheck.callback, parentCallback);
    });
    return identicalCallbacks.length >= allowedCallStackSize;
  };
  return areCallbacksIdentical = function(callback1, callback2) {
    if (callback1.toString) {
      return callback1.toString() === callback2.toString();
    } else {
      return callback1 === callback2;
    }
  };
})();
